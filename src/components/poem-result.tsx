
'use client';

import Image from 'next/image';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { Button } from '@/components/ui/button';
import { Share2, BookOpen, Music4, LoaderCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import AudioPlayer from '@/components/audio-player';


type PoemResultProps = {
  poem: string | null;
  imagePreview: string | null;
  isLoading: boolean;
  audioDataUri: string | null;
  isNarrating: boolean;
  onNarrate: () => void;
};

export default function PoemResult({ poem, imagePreview, isLoading, audioDataUri, isNarrating, onNarrate }: PoemResultProps) {
  const { toast } = useToast();
  
  const shareOnTwitter = () => {
    const text = `A poem inspired by a photo:\n\n${poem}\n\nGenerated by #PhotoPoet`;
    const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
    window.open(url, '_blank');
  };

  const shareOnFacebook = () => {
    const quote = `A poem inspired by a photo:\n\n${poem}\n\nGenerated by #PhotoPoet`;
    const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}&quote=${encodeURIComponent(quote)}`;
    window.open(url, '_blank');
  };

  const shareOnInstagram = () => {
    if (navigator.clipboard && poem) {
      navigator.clipboard.writeText(`A poem inspired by a photo:\n\n${poem}\n\nGenerated by #PhotoPoet`);
      toast({
        title: "Poem Copied!",
        description: "The poem has been copied to your clipboard. Open Instagram to share it!",
      });
    } else {
      toast({
        variant: "destructive",
        title: "Copy Failed",
        description: "Could not copy poem to clipboard.",
      });
    }
  };
  
  return (
    <Card className="shadow-md animate-in fade-in-50 slide-in-from-bottom-10 duration-500">
      <CardHeader>
        <CardTitle className="flex items-center justify-between gap-2 font-headline">
          <div className="flex items-center gap-2">
            <BookOpen className="text-accent" />
            Poetic Vision
          </div>
          {poem && !isLoading && (
            <Button onClick={onNarrate} disabled={isNarrating} variant="outline" size="sm">
              {isNarrating ? (
                <>
                  <LoaderCircle className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Music4 className="mr-2 h-4 w-4" />
                  Listen to Poem
                </>
              )}
            </Button>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6 items-start">
        <div className="relative w-full aspect-square rounded-lg overflow-hidden shadow-lg">
          {isLoading && !imagePreview ? (
            <Skeleton className="h-full w-full" />
          ) : (
            imagePreview && (
              <Image
                src={imagePreview}
                alt="Source for poem"
                layout="fill"
                objectFit="cover"
                data-ai-hint="user image"
              />
            )
          )}
        </div>
        <div className="space-y-4">
          {isLoading ? (
            <div className="space-y-3">
              <Skeleton className="h-4 w-4/5" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-2/3" />
            </div>
          ) : (
            poem && (
              <p className="text-foreground/90 whitespace-pre-wrap leading-relaxed italic">
                {poem}
              </p>
            )
          )}
        </div>
      </CardContent>
      {audioDataUri && <AudioPlayer audioDataUri={audioDataUri} />}
      {poem && !isLoading && (
        <CardFooter className="flex justify-end gap-2 flex-wrap">
            <Button variant="outline" onClick={shareOnTwitter}>
                <Share2 className="mr-2 h-4 w-4" /> Share on X
            </Button>
            <Button variant="outline" onClick={shareOnFacebook}>
                <Share2 className="mr-2 h-4 w-4" /> Share on Facebook
            </Button>
            <Button variant="outline" onClick={shareOnInstagram}>
                <Share2 className="mr-2 h-4 w-4" /> Share on Instagram
            </Button>
        </CardFooter>
      )}
    </Card>
  );
}
